#####################################################################
#     PRINT START
#####################################################################

[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer. Such as bed, extruder, and chamber temps
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default("40")|int %}
    
    #turn on case light
    CASELIGHT_ON
    # Clear bed mesh
    BED_MESH_CLEAR
    # Reset Z-offset
    SET_GCODE_OFFSET Z=0
    # Start bed heating (but don't wait for it)
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    G28
    # Move nozzle up a little
    G1 Z10 F3000
    #Switch caselight to show preheat
    SET_LED_EFFECT EFFECT=caselight_heating
    # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED_TEMP|int > 90 %}
    SET_FAN_SPEED FAN=Nevermore SPEED=1               # Turn on the nevermore
    M140 S{BED_TEMP}                                  # Set the target temp for the bed
    G1 Z20                                            # Move bed down
    SET_HEATER_TEMPERATURE HEATER=heater_chamber TARGET={CHAMBER_TEMP|default(0)}
    TEMPERATURE_WAIT SENSOR="heater_generic heater_chamber" MINIMUM={CHAMBER_TEMP} # waits on chamber temp
    G4 P300000             # Wait 5 minutes to heat soak, 1 minute = 60000 milliseconds

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 1 min soak
  {% else %}
    M190 S{BED_TEMP}                                  # Set the target temp for the bed
    G4 P60000                                           # Wait 1 min for the bedtemp to stabilize
  {% endif %}

    # Park to right of nozzle brush and wait for extruder temp
    G1 X35 Y-25 Z24
    # Preheat to nozzle to probing temp
    M109 S150
    # Clean nozzle before beacon contact
    CLEAN_NOZZLE
    # Move to Beacon auto calibrate position
    G1 X108.5 Y100.5 Z5
    # Auto-calibrate beacon offset
    BEACON_AUTO_CALIBRATE
    # KAMP adaptive bed mesh
    BED_MESH_CALIBRATE
    # Apply initial z-offset
    SET_GCODE_OFFSET Z=0.06
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Turn caselight back onto regular mode
    STOP_LED_EFFECTS
    CASELIGHT_ON
    # KAMP adaptive purge
    LINE_PURGE

    
    
#####################################################################
#     PRINT END
#####################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 15) %}
        {% set x_safe = 10.0 %}
    {% else %}
        {% set x_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 15) %}
        {% set y_safe = 10.0 %}
    {% else %}
        {% set y_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 50.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    # wait for buffer to clear
    M400 
    # Turn off Chamber heater
    SET_HEATER_TEMPERATURE HEATER=heater_chamber TARGET=0
    # Switch caselight to finished mode
    CASELIGHT_FINISHED
    # zero the extruder
    G92 E0
    # relative positioning
    G91
    # retract
    G1 E-5 F300 
    # move nozzle up
    G0 Z{z_safe} + Z10 F3600 
    # move nozzle to safe X and Y
    G0 X{x_safe} Y{y_safe} F20000
    # turn off hotend
    M104 S0
    # turn off bed
    M140 S0
    # turn off fan
    M106 S0
    # absolute positioning
    G90
    # park nozzle at rear
    G0 X{max_x / 2} Y{max_y - 5} F3600 
    # Turn off motors
    M84 
    # Keep Nevermore on for longer 
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180  
    
#####################################################################
#     CHANGE FILAMENT
#####################################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  75
variable_purge_distance:  15
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  75
variable_purge_distance:  5
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

#####################################################################
#     NOZZLE BRUSH
#####################################################################

[gcode_macro PARK_BRUSH]
gcode:
    SET_SERVO SERVO=nozzle_brush ANGLE=90
    G4 P1000
    #SET_SERVO SERVO=nozzle_brush WIDTH=0

[gcode_macro RAISE_BRUSH]
gcode:
    SET_SERVO SERVO=nozzle_brush ANGLE=0
    G4 P2000
    #SET_SERVO SERVO=nozzle_brush WIDTH=0

#####################################################################
#     TEST SPEED
#####################################################################

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    